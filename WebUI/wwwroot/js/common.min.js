
var lu = lu || {};

lu.routers = {
    // Controller Routes
    GetAllUsers: "/User/GetAllUser?partialViewIdentifier=",
    GetAllReseller: "/Reseller/GetAllReseller?partialViewIdentifier=",
    GetAllOrganization: "/Organization/GetAllOrganization?partialViewIdentifier=",
    GetAllLicense: "/License/GetAllLicense?partialViewIdentifier=",
    GetAllSchool: "/School/GetAllSchool?partialViewIdentifier=",
    GetAllTeacher: "/Teacher/GetAllTeacher?partialViewIdentifier=",
    GetAllClass: "/Class/GetAllClass?partialViewIdentifier=",
    GetAllStudent: "/Student/GetAllStudent?partialViewIdentifier=",
    GetAllRep: "/SaleRep/GetAllRep?partialViewIdentifier=",
    GetAllOU: "/OrganizationUnit/GetAllOU?partialViewIdentifier="
};

lu.subRouters = {
    LicenseLUPV: "_LicenseLUPV",
    LicenseResellerView: "_LicenseResellerView",
    LicenseUsage: "_LicenseUsage",
    LicenseUsageOrg: "_LicenseUsageOrg",
    LicensesStatusStudentView: "_LicensesStatusStudentView",
    LicensesList: "_LicenseList",
    LicensesOrgList: "_LicenseOrgList",
    Users: "_Users",

    OrganizationLUAdminPV: "_OrganizationLUAdminPV",
    OrganizationResellerPV: "_OrganizationResellerPV",
    OrganizationResellerRepPV: "_OrganizationResellerRepPV",
    OrganizationDetailPagePV: "_OrganizationDetailPagePV",
    OrganizationWS: "_OrganizationWS",
    RepDetailOrgList: "_RepDetailOrgList",
    ResellerOrgRPV: "_ResellerOrgRPV",
    Organization: "_Organization",
    ChildOrg: "_ChildOrg",
    ChildOrgRep: "_ChildOrgRep",
    OrgQuickView: "_OrgQuickView",

    SchoolLUPV: "_SchoolLUPV",
    Schools: "_Schools",

    Teachers: "_Teachers",
    TeachersOrgAdminPV: "_TeachersOrgAdminPV",

    Classes: "_Classes",
    ClassesOrgAdminPV: "_ClassesOrgAdminPV",
    ClassesSchoolAdminPV: "_ClassesSchoolPV",
    ClassesTeacherPV: "_ClassesTeacherPV",
    ClassTileDashBoard: "_ClassTileDashBoard",

    StudentListing: "_StudentListing",
    Students: "_Students",
    StudentsOrgAdminPV: "_StudentsOrgAdminPV",
    StudentsTeacherPV: "_StudentsTeacherPV",
    StudentTeacherRPV: "_StudentTeacherRPV",
    StudentPickerRV: "_StudentPickerRV",

    Resellers: "_Resellers",
    ResellerLUPV: "_ResellerLUPV",
    RepsQuickView: "_RepsQuickView",
    Reps: "_Reps",
    ResellerRepRPV: "_ResellerRepRPV",

    OrganizationUnitsDetailPagePV: "_OrganizationUnitsDetailPagePV",
    OrganizationUnitsDetailPV: "_OrganizationUnitsDetailPV",
    OrganizationUnitsList: "_OrganizationUnitsList",
    OUList: "_OUList",
    ResellerOURPV: "_ResellerOURPV",
    OU: "_OU",
    OrganizationUnits: "_OrganizationUnits"


}

lu.box = {
    Success: "Success",
    Alert: "Alert",
    Warning: "Warning",
    Error: "Error",
    Validation: "Validation"
};

lu.commonFeedbackMessages = {
    ErrorMessage: "An unexpected error has been occured while processing your request.Please contact support."
};

lu.partialPageLoadingToElement = function (pageUrl, dataObj, elementId, btnForLoading, callback, showOverlay = false, append = false, overlayID = null) {

    if (!lu.isNullOrEmpty(btnForLoading)) {
        var btnOriginalHtml = lu.showLoadingToButtonAndReturnOriginalHtml(btnForLoading, append);
    }
    $.ajax({
        async: true,
        cache: false,
        url: pageUrl,
        contentType: 'application/html; charset=utf-8',
        type: 'GET',
        data: dataObj,
        dataType: 'html',
        success: function (data) {
          
            if (data.indexOf('"error":true,') !== -1) {
                lu.showAlertWithType(JSON.parse(data).msg, "error");
            } else {
                if (append) {

                    $("#" + elementId).append(data);
                } else {
                    $("#" + elementId).empty().html(data);
                }
            }
            lu.handleAjaxCallBackAndLoadingButton(btnForLoading, btnOriginalHtml, callback, data);
            if (!append) {
                lu.hideLoading(overlayID);
            }
        },
        xhr: function () {

            var xhr = new window.XMLHttpRequest();
            //Download progress
            xhr.addEventListener("progress", function (evt) {
                if (evt.lengthComputable) {
                    $("#" + elementId).find('.progress-bar').css('width', Math.round(evt.loaded / evt.total * 100) + "%");
                }
            }, false);
            return xhr;
        },
        beforeSend: function () {
            if (!append) {
                if (showOverlay) {
                    lu.showLoading(null, overlayID);
                }
                else if (lu.isNullOrEmpty(btnForLoading)) {
                    $("#" + elementId).empty().html(lu.GetProgressBarHtml(lu.ColorClass.Primary));
                }
            }
        },
        error: function (ex) {

            if (!lu.isNullOrEmpty($("#" + elementId).find('.progress-bar'))) {
                //$("#" + elementId).empty();
            }
            lu.handleAjaxCallBackAndLoadingButton(btnForLoading, btnOriginalHtml, callback, false);
            //lu.ajaxErrorCall(ex);
        }
    });
};

lu.partialPageLoadingToElementPostCall = function (pageUrl, dataObj, elementId, btnForLoading, callback, showOverlay = false) {
    if (!lu.isNullOrEmpty(btnForLoading)) {
        var btnOriginalHtml = lu.showLoadingToButtonAndReturnOriginalHtml(btnForLoading);
    }
    $.ajax({
        cache: false,
        url: pageUrl,
        //contentType: 'application/html; charset=utf-8',
        type: 'POST',
        async: true,
        data: dataObj,
        //dataType: 'html',
        success: function (data) {
            if (data.indexOf('"error":true,') !== -1) {
                lu.showAlertWithType(JSON.parse(data).msg, "error");
            } else {
                $("#" + elementId).empty().html(data);
            }
            lu.handleAjaxCallBackAndLoadingButton(btnForLoading, btnOriginalHtml, callback, data);
            lu.hideLoading();
        },
        xhr: function () {
            var xhr = new window.XMLHttpRequest();
            //Download progress
            xhr.addEventListener("progress", function (evt) {
                if (evt.lengthComputable) {
                    $("#" + elementId).find('.progress-bar').css('width', Math.round(evt.loaded / evt.total * 100) + "%");
                }
            }, false);
            return xhr;
        },
        beforeSend: function () {
            if (showOverlay) {
                lu.showLoading();
            }
            else if (lu.isNullOrEmpty(btnForLoading)) {
                $("#" + elementId).empty().html(lu.GetProgressBarHtml(lu.ColorClass.Primary));
            }
        },
        error: function (ex) {
            if (!lu.isNullOrEmpty($("#" + elementId).find('.progress-bar'))) {
                $("#" + elementId).empty();
            }
            lu.handleAjaxCallBackAndLoadingButton(btnForLoading, btnOriginalHtml, callback, false);
            lu.ajaxErrorCall(ex);
        }
    });
};

lu.ajaxPostCall = function (pageUrl, dataObj, callback, btnForLoading, showOverlay = true) {
    if (!lu.isNullOrEmpty(btnForLoading)) {
        var btnOriginalHtml = $(btnForLoading)[0].innerHTML;
        lu.showLoadingToButtonAndReturnOriginalHtml(btnForLoading);
    }
    if (showOverlay) {
        lu.showLoading();
    }
    $.ajax({
        cache: false,
        url: pageUrl,
        type: 'POST',
        data: dataObj,
        async: true,
        success: function (data, status, xhr) {
            lu.hideLoading();
            if (!lu.isNullOrEmpty(btnForLoading)) {
                lu.hideLoadingFromButton(btnForLoading, btnOriginalHtml);
            }
            if (!lu.isNullOrEmpty(callback)) {
                callback(data);
            }
        },
        error: function (xhr, ex) {
            if (!lu.isNullOrEmpty(btnForLoading)) {
                lu.hideLoadingFromButton(btnForLoading, btnOriginalHtml);
            }
            lu.ajaxErrorCall(ex);
        }
    });
};

lu.handleAjaxCallBackAndLoadingButton = function (btnForLoading, btnOriginalHtml, callback, data) {

    if (!lu.isNullOrEmpty(btnForLoading)) {
        lu.hideLoadingFromButton(btnForLoading, btnOriginalHtml);
    }
    if (!lu.isNullOrEmpty(callback)) {
        callback(data);
    }
};

lu.showLoading = function (msg, overlayID = null) {

    if (overlayID != null) {
        $(overlayID).removeClass('d-none');
    } else {
        $('#overlay-text').html(lu.isNullOrEmpty(msg) ? "Loading please wait..." : msg);
        $('#overlay').removeClass('d-none');
    }
};

lu.hideLoading = function (overlayID = '#overlay') {

    $(overlayID).addClass('d-none');
};

lu.partialPageLoadingPost = function (pageUrl, dataObj) {
    lu.showLoading();
    $.ajax({
        cache: false,
        url: pageUrl,
        type: 'POST',
        data: dataObj,
        //async: true,
        success: function (data, status, xhr) {
            if (xhr.getResponseHeader('LOGIN_SCREEN_Ready') === '1') {
                lu.WhenSessionIsExpired();
                return;
            }
            $('#RenderBody').empty().html(data);
            lu.hideLoading();
        },
        error: function (xhr, ex) {
            if (xhr.getResponseHeader('LOGIN_SCREEN_Ready') === '1') {
                lu.WhenSessionIsExpired();
                return;
            }
            lu.ajaxErrorCall(ex);
            //alert(ex);
        }

    });

};

lu.ajaxPostDataWithFiles = function (pageUrl, dataObj, successMessage, callBack, showMessage = true) {

    lu.showLoading();
    $.ajax({
        type: "POST",
        url: pageUrl,
        dataType: "json",
        contentType: false, // Not to set any content header
        processData: false, // Not to process data
        data: dataObj,
        success: function (result, status, xhr) {
            //if (showMessage) {
            //    if (result > 0 || result !== null || result !== "") {
            //        lu.notification(lu.box.Success, successMessage);
            //    }
            //    else {
            //        lu.notification(lu.box.Error, 'Something went wrong! Please Contact Support.....');
            //    }
            //}
            lu.hideLoading();
            if (callBack !== undefined) { callBack(result); }
        },
        error: function (xhr, status, error) {

            lu.hideLoading();
            if (xhr.getResponseHeader('LOGIN_SCREEN_Ready') === '1') {
                lu.WhenSessionIsExpired();
                return;
            }
            lu.notification(lu.box.Error, 'Something went wrong! Please Contact Support!!!!');
        }
    });

};

lu.ajaxErrorCall = function (ex) {
    lu.hideLoading();
    if (ex.responseJSON !== undefined) {
        lu.showAlertWithType(ex.responseJSON.message, "error");
    } else if (ex.statusText !== undefined) {
        lu.showAlertWithType(ex.statusText, "error");
    } else if (ex.responseText !== undefined) {
        lu.showAlertWithType(ex.responseText, "error");
    } else {
        lu.showAlertWithType('Something went wrong.', "error");
    }
};

lu.showLoadingToButtonAndReturnOriginalHtml = function (btn) {
    let buttonPrevHtml = $(btn)[0].innerHTML;
    $(btn)[0].innerHTML = '<span class="spinner-grow spinner-grow-sm" role="status" aria-hidden="true"></span> Please wait..';
    $(btn).attr("disabled", "disabled");
    return buttonPrevHtml;
};

lu.hideLoadingFromButton = function (btn, btnPrevHtml) {
    try {
        //let bnt = 
        $(btn).innerHTML = btnPrevHtml;
        $(btn).removeAttr("disabled");
    }
    catch {
        lu.hideLoading();
    }
};

lu.StatusCodes = {
    Success: 200,
    Duplication: 400,
    Error: 404,
    Forbidden: 403
};

lu.showNotificationByStatusCode = function (statusCode, feedBackMessage) {
    if (statusCode === lu.StatusCodes.Success) {
        lu.showAlertWithType(feedBackMessage, "success");
    } else if (statusCode === lu.StatusCodes.Duplication || statusCode === lu.StatusCodes.Warning) {
        lu.showAlertWithType(feedBackMessage, null, "warning", "Warning");
    }
    else {
        lu.showAlertWithType(feedBackMessage, "error");
    }
};

lu.showAlertWithType = function (msg, type = "success", timer = 3000) {
    Swal.fire(
        {
            //position: "top-end",
            type: type,
            title: msg,
            showConfirmButton: false,
            timer: timer,
            customClass: "swal-size-sm"
        });
};

lu.getFormData = function ($form) {
    var unindexed_array = $form.serializeArray();
    var indexed_array = {};

    $.map(unindexed_array, function (n, i) {
        indexed_array[n['name']] = n['value'];
    });

    return indexed_array;
};

lu.isNullOrEmpty = function (source) {
    if (source === "" || source === null || source === undefined) {
        return true;
    }
    return false;
};

jQuery(document).ready(function ($) {

});

lu.ValidateEmail = function (email) {
    var regex = /^([a-zA-Z0-9_.+-])+\@(([a-zA-Z0-9-])+\.)+([a-zA-Z0-9]{2,4})+$/;
    return regex.test(email);
};

lu.ValidateDateOfBirth = function (dob) {
    var myDate = new Date(dob);
    if (myDate === 'Invalid Date') {
        lu.notification(lu.box.Validation, 'Wrong Date Of Birth! because it is invalid Date');
        return false;
    }
    var today = new Date();
    var startDate = new Date('1900, 01, 01');
    if (myDate > today) {
        lu.notification(lu.box.Validation, 'Wrong Date Of Birth! because it is future Date');
        return false;
    } else {
        if (myDate < startDate) {
            lu.notification(lu.box.Validation, 'Wrong Date Of Birth! because it is old Date');
            return false;
        } else {
            return true;
        }
    }
};

lu.ValidateDate = function (date, fieldName) {
    var myDate = new Date(date);
    if (myDate === 'Invalid Date') {
        lu.notification(lu.box.Validation, 'Wrong ' + fieldName + ' Date! because it is invalid Date');
        return false;
    }
    var today = new Date();
    var startDate = new Date('1900, 01, 01');
    if (myDate > today) {
        lu.notification(lu.box.Validation, 'Wrong ' + fieldName + ' Date! because it is future Date');
        return false;
    } else {
        if (myDate < startDate) {
            lu.notification(lu.box.Validation, 'Wrong ' + fieldName + ' Date! because it is old Date');
            return false;
        } else {
            return true;
        }
    }
};

lu.ValidatePhoneNumber = function validatePhoneNumber(elementValue) {
    var phoneNumberPattern = /^\(?(\d{3})\)?[- ]?(\d{3})[- ]?(\d{4})$/;
    return phoneNumberPattern.test(elementValue);
};

lu.CopyToClipboard = function (textToCopy, message) {
    //
    const el = document.createElement('textarea');
    //message = message || 'copied to clipboard';
    el.value = textToCopy;
    document.body.appendChild(el);
    el.select();
    document.execCommand('copy');
    document.body.removeChild(el);
    toastr.options = {
        "closeButton": false,
        "debug": false,
        "newestOnTop": true,
        "progressBar": true,
        "positionClass": "toast-top-right",
        "preventDuplicates": true,
        "onclick": null,
        "showDuration": 100,
        "hideDuration": 100,
        "timeOut": 2000,
        "extendedTimeOut": 1000,
        "showEasing": "swing",
        "hideEasing": "linear",
        "showMethod": "fadeIn",
        "hideMethod": "fadeOut"
    };
    toastr["success"]((message || 'copied to clipboard'), "Success");
};

lu.showDecisionAlert = function (title, message, type = "warning", confirmationText, confirmationCallBack, cancelCallBack, cancelButtonText = "Cancel", showCancelButton = true, showDefaultTitle = true) {
    Swal.fire(
        {
            title: lu.isNullOrEmpty(title) && showDefaultTitle ? "Are you sure?" : title,
            text: message,
            type: lu.isNullOrEmpty(type) ? "warning" : type,
            showCancelButton: showCancelButton,
            reverseButtons: true,
            confirmButtonText: '<i class="fal fa-check mr-1"></i>' + confirmationText,
            cancelButtonText: '<i class="fal fa-times mr-1"></i>' + cancelButtonText,
            onBeforeOpen: function (ele) {
                $(ele).find('button.swal2-confirm.swal2-styled').toggleClass('swal2-confirm swal2-styled swal2-confirm btn btn-sm btn-primary ml-1')
                $(ele).find('button.swal2-cancel.swal2-styled').toggleClass('swal2-cancel swal2-styled swal2-cancel btn btn-sm btn-info mr-1')
            },

        }).then(function (result) {
            if (result.value) {
                if (!lu.isNullOrEmpty(confirmationCallBack)) {
                    confirmationCallBack();
                }
            }
            else {
                if (!lu.isNullOrEmpty(cancelCallBack)) {
                    cancelCallBack();
                }
            }
        });
};

lu.showDecisionAlertWithHTml = function (title, html, type = "warning", confirmationText, confirmationCallBack, cancelCallBack, cancelButtonText = "Cancel", showCancelButton = true, width = "") {
    Swal.fire(
        {
            title: lu.isNullOrEmpty(title) ? "Are you sure?" : title,
            html: html,
            type: type,
            showCancelButton: showCancelButton,
            reverseButtons: true,
            width: width,
            confirmButtonText: '<i class="fal fa-check mr-1"></i>' + confirmationText,
            cancelButtonText: '<i class="fal fa-times mr-1"></i>' + cancelButtonText,
            onBeforeOpen: function (ele) {
                $(ele).find('button.swal2-confirm.swal2-styled').toggleClass('swal2-confirm swal2-styled swal2-confirm btn btn-sm btn-info ml-1')
                $(ele).find('button.swal2-cancel.swal2-styled').toggleClass('swal2-cancel swal2-styled swal2-cancel btn btn-sm btn-danger mr-1')
            }

        }).then(function (result) {
            if (result.value) {
                if (!lu.isNullOrEmpty(confirmationCallBack)) {
                    confirmationCallBack();
                }
            }
            else {
                if (!lu.isNullOrEmpty(cancelCallBack)) {
                    cancelCallBack();
                }
            }
        });
};

lu.showDecisionAlertWithHTmlCustom = function (title, html, type = "warning", confirmationText, confirmationCallBack, cancelCallBack, cancelButtonText = "Cancel", showCancelButton = true, width = "") {
    Swal.fire(
        {
            title: lu.isNullOrEmpty(title) ? "" : title,
            html: html,
            type: type,
            showCancelButton: showCancelButton,
            reverseButtons: true,
            width: width,
            confirmButtonText: '<i class="fal fa-check mr-1"></i>' + confirmationText,
            cancelButtonText: '<i class="fal fa-times mr-1"></i>' + cancelButtonText,
            onBeforeOpen: function (ele) {
                $(ele).find('button.swal2-confirm.swal2-styled').toggleClass('swal2-confirm swal2-styled swal2-confirm btn btn-sm btn-info ml-1')
                $(ele).find('button.swal2-cancel.swal2-styled').toggleClass('swal2-cancel swal2-styled swal2-cancel btn btn-sm btn-danger mr-1')
            }

        }).then(function (result) {
            if (result.value) {
                if (!lu.isNullOrEmpty(confirmationCallBack)) {
                    confirmationCallBack();
                }
            }
            else {
                if (!lu.isNullOrEmpty(cancelCallBack)) {
                    cancelCallBack();
                }
            }
        });
};

lu.showDecisionAlertWithBothFunc = function (title, html, type = "warning", confirmationText, confirmationCallBack, cancelCallBack, cancelButtonText = "Cancel", showCancelButton = true, width = "") {
    Swal.fire(
        {
            title: lu.isNullOrEmpty(title) ? "" : title,
            html: html,
            type: type,
            showCancelButton: showCancelButton,
            reverseButtons: true,
            width: width,
            confirmButtonText: '<i class="fal fa-check mr-1"></i>' + confirmationText,
            cancelButtonText: '<i class="fal fa-times mr-1"></i>' + cancelButtonText,
            onBeforeOpen: function (ele) {
                $(ele).find('button.swal2-confirm.swal2-styled').toggleClass('swal2-confirm swal2-styled swal2-confirm btn btn-sm btn-primary ml-1')
                $(ele).find('button.swal2-cancel.swal2-styled').toggleClass('swal2-cancel swal2-styled swal2-cancel btn btn-sm btn-info mr-1')
            }

        }).then(function (result) {
            if (result.value) {
                if (!lu.isNullOrEmpty(confirmationCallBack)) {
                    confirmationCallBack();
                }
            }
            else {
                if (!lu.isNullOrEmpty(cancelCallBack)) {
                    cancelCallBack();
                }
            }
        });
};

lu.setOldValuesInContainerFileds = function ($container, flagPopulateOldValue) {
    if (flagPopulateOldValue) {
        $.each($($container.find('select')), function (key, element) {
            $(element).val($(element).data('oldvalue')).trigger('change');
        });
        $.each($($container.find('input')), function (key, element) {
            $(element).val($(element).data('oldvalue'));
        });
        $.each($($container.find('input[type=checkbox]')), function (key, element) {

            if ($(element).val() === 'True') {
                $(element).prop('checked', true);
            } else {
                $(element).prop('checked', false);
            }
        });
        $container.find('.btn_save_patient').html(`<span class="fal fa-pencil mr-1"></span>Update`);
    }
    else {
        $($container.find('input')).val('');
        $($container.find('select')).val(null).trigger('change');
        $container.find('.btn_save_patient').html(`<span class="fal fa-save mr-1"></span>Save`);
    }
};

lu.checkIfContainerStateChangedAndPromptSave = function ($container, flagShowAlert) {
    let state = false;
    $.each($($container.find('input')), function (key, element) {
        if ($(element).attr('id') === 'PatientPhoneNumber1' || $(element).attr('id') === 'PatientMobileNumber' || $(element).attr('id') === 'RPMobile' || $(element).attr('id') === 'RPPhoneNumber') {
            if ($(element).data('oldvalue') !== $(element).val().replace(/\D/g, '')) {
                return state = true;
            }
        }
        else if ($(element).data('oldvalue') !== $(element).val()) {
            flipEmailVerificationButton(false);

            return state = true;
        }
    });

    $.each($($container.find('select')), function (key, element) {
        if ($(element).data('oldvalue') !== $(element).val()) {
            return state = true;
        }
    });
    $.each($($container.find('input[type=checkbox]')), function (key, element) {
        let oldvalue = $(element).data('oldvalue') === 'True' ? true : false;
        if (oldvalue !== $(element).is(':checked')) {
            return state = true;
        }
    });
    if (flagShowAlert && state) {
        lu.showDecisionAlert("You have Pending changes!", "Do you want to save them?", "warning", 'Yes', function () {
            $($container).find('.btn_save_patient').trigger('click');
        }, function () {
            $($container).modal('hide');
        }, "No");
    } else {
        $($container).modal('hide');
    }
    return state;
};

lu.cloneValuesByName = function ($source, $destination) {
    $.each($($source.find('select')), function (key, element) {
        $destination.find(`select[name *= ${$(element).attr('name')}]`).val($(element).val()).trigger('change');
    });
    $.each($($source.find('input')), function (key, element) {
        $destination.find(`input[name *= ${$(element).attr('name')}]`).val($(element).val());
    });
};

lu.formatDate = function formatDate(date) {
    var d = new Date(date),
        month = '' + (d.getMonth() + 1),
        day = '' + d.getDate(),
        year = d.getFullYear();

    if (month.length < 2)
        month = '0' + month;
    if (day.length < 2)
        day = '0' + day;

    return [year, month, day].join('-');
};

lu.getTimeDiffInMinutes = function diff_minutes(dt2, dt1) {

    var diff = (dt2.getTime() - dt1.getTime()) / 1000;
    diff /= 60;
    return Math.abs(Math.round(diff));

};

lu.formatPhoneNumber = function (phoneNumberString) {
    var cleaned = ('' + phoneNumberString).replace(/\D/g, '');
    var match = cleaned.match(/^(1|)?(\d{3})(\d{3})(\d{4})$/);
    if (match) {
        var intlCode = (match[1] ? '+1 ' : '');
        return [intlCode, '(', match[2], ') ', match[3], '-', match[4]].join('');
    }
    return null;
};

lu.DateRangeFilter = {
    Today: 1,
    Yesterday: 2,
    Last2Days: 15,
    Last7Days: 3,
    Last14Days: 16,
    Last30Days: 4,
    Last60Days: 5,
    Last90Days: 6,
    MonthToDate: 7,
    PreviousMonth: 8,
    CurrentQuarter: 9,
    PreviousQuarter: 10,
    YearToDate: 11,
    PreviousYear: 12,
    CustomDateRange: 13,
    All: 14
};

lu.GetSpinnerHtml = function (spinnerType, spinnerColor) {
    return `<div class="spinner-${spinnerType} text-${spinnerColor}" role="status"></div>`;
};

lu.SpinnerType = {
    Border: "border",
    Grow: "grow",
    CubeBorder: "border rounded-0",
    GrowCube: "grow rounded-0"
};

lu.ColorClass = {
    Success: "success",
    Secondary: "secondary",
    Primary: "primary",
    Danger: "danger",
    Warning: "warning",
    Info: "info",
    Light: "light",
    Dark: "dark"
};

lu.ShowSpinnerToElement = function (element, spinnerType, spinnerColor) {
    let buttonPrevHtml = $(element)[0].innerHTML;
    $(element)[0].innerHTML = lu.GetSpinnerHtml(spinnerType, spinnerColor);
    return buttonPrevHtml;
};

lu.RemoveSpinnerFromElementAnAppendOrignalHtml = function (element, prevHtml) {
    $(element)[0].innerHTML = prevHtml;
};

lu.GetProgressBarHtml = function (className) {
    return `<div class="fs-xl color-danger-300 mb-1"><i class="fal fa-cog fa-spin mr-1"></i>Loading please wait...</div>
            <div class="progress">
                <div class="progress-bar progress-bar-striped bg-${className}-500 progress-bar-animated" role="progressbar" style="width: 10%" aria-valuenow="80" aria-valuemin="0" aria-valuemax="100"></div>
            </div>`;
};

lu.validateForm = function ($form) {

    $form.addClass('was-validated');
    return $form[0].checkValidity();
};

lu.ScrollDiv = function () {
    $('.slimscroll').slimScroll({
        position: 'right',
        height: '350px',
        railVisible: true,
    });
}

lu.resetFormForAdd = function ($form) {
    $form.removeClass('was-validated');
    $form.find('input').val('');
    $form.find('textarea').val('');
    $form.find('select').val('').trigger('change');
};

lu.toggleSwitch = function (_that, flag, dataAttr = 'isactive') {
    $(_that).prop('checked', flag);
    $(_that).data(dataAttr, flag);
};

lu.getFormDataWithSerializedArray = function (formID) {
    var form = $('#' + formID);
    formData = new FormData()
    formParams = form.serializeArray();
    $.each(form.find('input[type="file"]'), function (i, tag) {
        $.each($(tag)[0].files, function (i, file) {
            formData.append(tag.name, file);
        });
    });
    $.each(formParams, function (i, val) {
        formData.append(val.name, val.value);
    });
    return formData;
}

lu.CustomDatatableBasic = function (tableID) {
    if ($.fn.dataTable.isDataTable('#' + tableID)) {
        $('#' + tableID).DataTable();
    }
    else {
        $('#' + tableID).DataTable({
            //"responsive":true,
            "scrollY": "200px",
            "paging": false,
            "bFilter": true,
            dom:
                /*	--- Layout Structure 
                    --- Options
                    l	-	length changing input control
                    f	-	filtering input
                    t	-	The table!
                    i	-	Table information summary
                    p	-	pagination control
                    r	-	processing display element
                    B	-	buttons
                    R	-	ColReorder
                    S	-	Select
    
                    --- Markup
                    < and >				- div element
                    <"class" and >		- div with a class
                    <"#id" and >		- div with an ID
                    <"#id.class" and >	- div with an ID and a class
    
                    --- Further reading
                    https://datatables.net/reference/option/dom
                    --------------------------------------
                 */
                "<'row dt-top-panel'<'col-lg-12 col-sm-12 col-md-6 d-flex d-flex justify-content-end dt-search'f><'col-sm-12 col-md-6 d-flex align-items-center justify-content-end dt-buttons-container'>>"
        });
    }
}

lu.CustomDatatable = function (tableID) {
    $('#' + tableID).DataTable({
        "bSort": false,
        "paging": false,
        dom:
            /*	--- Layout Structure 
                --- Options
                l	-	length changing input control
                f	-	filtering input
                t	-	The table!
                i	-	Table information summary
                p	-	pagination control
                r	-	processing display element
                B	-	buttons
                R	-	ColReorder
                S	-	Select

                --- Markup
                < and >				- div element
                <"class" and >		- div with a class
                <"#id" and >		- div with an ID
                <"#id.class" and >	- div with an ID and a class

                --- Further reading
                https://datatables.net/reference/option/dom
                --------------------------------------
             */
            "<'row mb-3 dt-top-panel'<'col-sm-12 col-md-6 d-flex align-items-center justify-content-start dt-search'f><'col-sm-12 col-md-6 d-flex align-items-center justify-content-end dt-buttons-container'B>>" +
            "<'row'<'col-sm-12'tr>>" +
            "<'row'<'col-sm-12 col-md-5'i><'col-sm-12 col-md-7'p>>",
        buttons: [
            /*{
                extend:    'colvis',
                text:      'Column Visibility',
                titleAttr: 'Col visibility',
                className: 'mr-sm-3'
            },*/
            {
                extend: 'pdfHtml5',
                text: '<i class="fa fa-file-pdf"></i>',
                titleAttr: 'Generate PDF',
                className: 'btn-outline-danger btn-sm btn-icon rounded-circle waves-effect waves-themed mr-1 ml-1'

            },
            {
                extend: 'excelHtml5',
                text: '<i class="fa fa-file-excel"></i>',
                titleAttr: 'Generate Excel',
                className: 'btn-outline-success btn-sm btn-icon rounded-circle waves-effect waves-themed mr-1'
            },
            {
                extend: 'csvHtml5',
                text: '<i class="fa fa-download"></i>',
                titleAttr: 'Generate CSV',
                className: 'btn-outline-primary btn-sm btn-icon rounded-circle waves-effect waves-themed mr-1'
            },
            {
                extend: 'copyHtml5',
                text: '<i class="fa fa-copy"></i>',
                titleAttr: 'Copy to clipboard',
                className: 'btn-outline-info btn-sm btn-icon rounded-circle waves-effect waves-themed mr-1'
            },
            {
                extend: 'print',
                text: '<i class="fal fa-print"></i>',
                titleAttr: 'Print Table',
                className: 'btn-outline-secondary btn-sm btn-icon rounded-circle waves-effect waves-themed'
            }
        ]
    });

}

lu.CustomDatatable2 = function (tableID) {
    if ($.fn.dataTable.isDataTable('#' + tableID)) {
        $('#' + tableID).DataTable();
    }
    else {
        $('#' + tableID).DataTable({
            'columnDefs': [
                { "orderable": false, "targets": 0 }
            ],
            "responsive": true,
            "paging": false,
            "bFilter": true,
            dom:
                /*	--- Layout Structure 
                    --- Options
                    l	-	length changing input control
                    f	-	filtering input
                    t	-	The table!
                    i	-	Table information summary
                    p	-	pagination control
                    r	-	processing display element
                    B	-	buttons
                    R	-	ColReorder
                    S	-	Select
    
                    --- Markup
                    < and >				- div element
                    <"class" and >		- div with a class
                    <"#id" and >		- div with an ID
                    <"#id.class" and >	- div with an ID and a class
    
                    --- Further reading
                    https://datatables.net/reference/option/dom
                    --------------------------------------
                 */""
            /*"<'row dt-top-panel'<'col-lg-12 col-sm-12 col-md-6 d-flex d-flex justify-content-end dt-search'f><'col-sm-12 col-md-6 d-flex align-items-center justify-content-end dt-buttons-container'>>"*/
        });
    }
}
lu.markMatch = function (text, term) {
    // Find where the match is

    var match = text.toUpperCase().indexOf(term.toUpperCase());
    var $result = $('<span></span>');

    // If there is no match, move on
    if (match < 0) {
        return $result.text(text);
    }

    // Put in whatever text is before the match
    $result.text(text.substring(0, match));

    // Mark the match
    var $match = $('<span style="text-decoration:underline; font-weight:bold"></span>');
    $match.text(text.substring(match, match + term.length));
    // Append the matching text
    $result.append($match);

    // Put in whatever is after the match
    $result.append(text.substring(match + term.length));

    return $result;
}

lu.InitSmartPanel = function () {
    $('#panel-1').smartPanel({
        localStorage: true,
        onChange: function () { },
        onSave: function () { },
        opacity: 1,
        sortable: false,
        buttonOrder: '%collapse% %fullscreen% %close%',
        buttonOrderDropdown: '%refresh% %locked% %color% %custom% %reset%',
        customButton: false,
        customButtonLabel: "Custom Button",
        onCustom: function () { },
        closeButton: false,
        onClosepanel: function () {
            if (myapp_config.debugState)
                console.log($(this).closest(".panel").attr('id') + " onClosepanel")
        },
        fullscreenButton: true,
        onFullscreen: function () {
            if (myapp_config.debugState)
                console.log($(this).closest(".panel").attr('id') + " onFullscreen")
        },
        collapseButton: true,
        onCollapse: function () {
            if (myapp_config.debugState)
                console.log($(this).closest(".panel").attr('id') + " onCollapse")
        },
        lockedButton: false,
        refreshButton: false,
        refreshButtonLabel: "Refresh Content",
        onRefresh: function () {
            if (myapp_config.debugState)
                console.log($(this).closest(".panel").attr('id') + " onRefresh")
        },
        colorButton: false,
        colorButtonLabel: "Panel Style",
        onColor: function () {
            if (myapp_config.debugState)
                console.log($(this).closest(".panel").attr('id') + " onColor")
        },
        panelColors: ['bg-primary-700 bg-success-gradient text-white',
            'bg-primary-500 bg-info-gradient text-white',
            'bg-primary-600 bg-primary-gradient text-white',
            'bg-info-600 bg-primray-gradient text-white',
            'bg-info-600 bg-info-gradient text-white',
            'bg-info-700 bg-success-gradient text-white',
            'bg-success-900 bg-info-gradient text-white',
            'bg-success-700 bg-primary-gradient text-white',
            'bg-success-600 bg-success-gradient text-white',
            'bg-danger-900 bg-info-gradient text-white',
            'bg-fusion-400 bg-fusion-gradient text-white',
            'bg-faded'],
        resetButton: false,
        resetButtonLabel: "Reset Panel",
        onReset: function () {
            if (myapp_config.debugState)
                console.log($(this).closest(".panel").attr('id') + " onReset callback")
        }

    });
}

lu.renderPartialWithPagination = function (pageUrl, tableID, tbodyID, showMoreBtnIdentifier, overlay, loaderHTML = '<span class="spinner-grow spinner-grow-sm" role="status" aria-hidden="true"></span> Please wait..') {
    try {

        var params = { pageIndex: 1 };
        lu.partialPageLoadingToElement(pageUrl, params, tbodyID, null,
            function () {
                var totalRows = $(`#${tbodyID}`).children().last().data('totalrows');
                var currentPageIndex = $(`#${tbodyID}`).children().last().data('pageindex');
                var currentPageSize = $(`#${tbodyID}`).children().last().data('pagesize');
                var hasMoreData = (totalRows - (currentPageIndex * currentPageSize)) > 0;

                lu.CustomDatatable2(tableID);
                if (hasMoreData)
                    $(showMoreBtnIdentifier).parent().removeClass('d-none');
                else {
                    $(showMoreBtnIdentifier).parent().addClass('d-none');
                }
            }, true, false, overlay);
    }
    catch (e) {
    }

    // Binds Click event of search button 
    $(`#${tableID}_SearchButton`).click(() => {

        var tableSelector = `#${tableID}`;

        var button = $(`${tableSelector}_SearchButton`);
        var searchKeyword = $(`${tableSelector}_SearchInput`).val();

        button.html(loaderHTML);
        button.attr("disabled", "disabled");
        try {
            console.log('searched: ' + searchKeyword);

            var params = {
                pageIndex: 1,
                keyword: searchKeyword
            };
            lu.partialPageLoadingToElement(pageUrl, params, tbodyID, null,
                function () {
                    button.empty().html('').html("<i class='fal fa-search'></i>");

                    var totalRows = $(`#${tbodyID}`).children().last().data('totalrows');
                    var currentPageIndex = $(`#${tbodyID}`).children().last().data('pageindex');
                    var currentPageSize = $(`#${tbodyID}`).children().last().data('pagesize');
                    var hasMoreData = (totalRows - (currentPageIndex * currentPageSize)) > 0;
                    if (!hasMoreData) {
                        $(showMoreBtnIdentifier).parent().addClass('d-none');
                    } else {
                        $(showMoreBtnIdentifier).parent().removeClass('d-none');

                    }
                    button.removeAttr("disabled");
                }
                , true, false, overlay);
        }
        catch (e) {
        }
    });

    // Binds Click event of show more button
    $(showMoreBtnIdentifier).click(() => {

        var button = $(showMoreBtnIdentifier);
        button.html(loaderHTML);
        button.attr("disabled", "disabled");
        var totalRows = $(`#${tbodyID}`).children().last().data('totalrows');
        var currentPageIndex = $(`#${tbodyID}`).children().last().data('pageindex');
        var currentPageSize = $(`#${tbodyID}`).children().last().data('pagesize');
        var searchkeyword = $(`#${tbodyID}`).children().last().data('searchkeyword');
        var hasMoreData = (totalRows - (currentPageIndex * currentPageSize)) > 0;

        if (hasMoreData) {
            try {
                var params = { pageIndex: currentPageIndex + 1, keyword: searchkeyword };
                lu.partialPageLoadingToElement(pageUrl, params, tbodyID, null,
                    function () {
                        //lu.CustomDatatable2(tableID);
                        //$(showMoreBtnIdentifier).parent().removeClass('d-none');
                        button.empty().html('').html("Load More");
                        button.removeAttr("disabled");
                    }
                    , true, true, overlay);
            }
            catch (e) {
            }

        }
        else {
            $(showMoreBtnIdentifier).parent().addClass('d-none');
        }
    });

};

lu.InitSmartPanel = function () {
    $('#panel-1').smartPanel({
        localStorage: true,
        onChange: function () { },
        onSave: function () { },
        opacity: 1,
        sortable: false,
        buttonOrder: '%collapse% %fullscreen% %close%',
        buttonOrderDropdown: '%refresh% %locked% %color% %custom% %reset%',
        customButton: false,
        customButtonLabel: "Custom Button",
        onCustom: function () { },
        closeButton: false,
        onClosepanel: function () {
            if (myapp_config.debugState)
                console.log($(this).closest(".panel").attr('id') + " onClosepanel")
        },
        fullscreenButton: true,
        onFullscreen: function () {
            if (myapp_config.debugState)
                console.log($(this).closest(".panel").attr('id') + " onFullscreen")
        },
        collapseButton: true,
        onCollapse: function () {
            if (myapp_config.debugState)
                console.log($(this).closest(".panel").attr('id') + " onCollapse")
        },
        lockedButton: false,
        refreshButton: false,
        refreshButtonLabel: "Refresh Content",
        onRefresh: function () {
            if (myapp_config.debugState)
                console.log($(this).closest(".panel").attr('id') + " onRefresh")
        },
        colorButton: false,
        colorButtonLabel: "Panel Style",
        onColor: function () {
            if (myapp_config.debugState)
                console.log($(this).closest(".panel").attr('id') + " onColor")
        },
        panelColors: ['bg-primary-700 bg-success-gradient text-white',
            'bg-primary-500 bg-info-gradient text-white',
            'bg-primary-600 bg-primary-gradient text-white',
            'bg-info-600 bg-primray-gradient text-white',
            'bg-info-600 bg-info-gradient text-white',
            'bg-info-700 bg-success-gradient text-white',
            'bg-success-900 bg-info-gradient text-white',
            'bg-success-700 bg-primary-gradient text-white',
            'bg-success-600 bg-success-gradient text-white',
            'bg-danger-900 bg-info-gradient text-white',
            'bg-fusion-400 bg-fusion-gradient text-white',
            'bg-faded'],
        resetButton: false,
        resetButtonLabel: "Reset Panel",
        onReset: function () {
            if (myapp_config.debugState)
                console.log($(this).closest(".panel").attr('id') + " onReset callback")
        }

    });
}

lu.renderPartialWithPagination = function (pageUrl, tableID, tbodyID, showMoreBtnIdentifier, overlay, loaderHTML = '<span class="spinner-grow spinner-grow-sm" role="status" aria-hidden="true"></span> Please wait..') {
    try {

        var params = { pageIndex: 1 };
        lu.partialPageLoadingToElement(pageUrl, params, tbodyID, null,
            function () {
                var totalRows = $(`#${tbodyID}`).children().last().data('totalrows');
                var currentPageIndex = $(`#${tbodyID}`).children().last().data('pageindex');
                var currentPageSize = $(`#${tbodyID}`).children().last().data('pagesize');
                var hasMoreData = (totalRows - (currentPageIndex * currentPageSize)) > 0;

                lu.CustomDatatable2(tableID);
                if (hasMoreData)
                    $(showMoreBtnIdentifier).parent().removeClass('d-none');
                else {
                    $(showMoreBtnIdentifier).parent().addClass('d-none');
                }
            }, true, false, overlay);
    }
    catch (e) {
    }

    // Binds Click event of search button 
    $(`#${tableID}_SearchButton`).click(() => {

        var tableSelector = `#${tableID}`;

        var button = $(`${tableSelector}_SearchButton`);
        var searchKeyword = $(`${tableSelector}_SearchInput`).val();

        button.html(loaderHTML);
        button.attr("disabled", "disabled");
        try {
            console.log('searched: ' + searchKeyword);

            var params = {
                pageIndex: 1,
                keyword: searchKeyword
            };
            lu.partialPageLoadingToElement(pageUrl, params, tbodyID, null,
                function () {
                    button.empty().html('').html("<i class='fal fa-search'></i>");

                    var totalRows = $(`#${tbodyID}`).children().last().data('totalrows');
                    var currentPageIndex = $(`#${tbodyID}`).children().last().data('pageindex');
                    var currentPageSize = $(`#${tbodyID}`).children().last().data('pagesize');
                    var hasMoreData = (totalRows - (currentPageIndex * currentPageSize)) > 0;
                    if (!hasMoreData) {
                        $(showMoreBtnIdentifier).parent().addClass('d-none');
                    } else {
                        $(showMoreBtnIdentifier).parent().removeClass('d-none');

                    }
                    button.removeAttr("disabled");
                }
                , true, false, overlay);
        }
        catch (e) {
        }
    });

    // Binds Click event of show more button
    $(showMoreBtnIdentifier).click(() => {

        var button = $(showMoreBtnIdentifier);
        button.html(loaderHTML);
        button.attr("disabled", "disabled");
        var totalRows = $(`#${tbodyID}`).children().last().data('totalrows');
        var currentPageIndex = $(`#${tbodyID}`).children().last().data('pageindex');
        var currentPageSize = $(`#${tbodyID}`).children().last().data('pagesize');
        var searchkeyword = $(`#${tbodyID}`).children().last().data('searchkeyword');
        var hasMoreData = (totalRows - (currentPageIndex * currentPageSize)) > 0;

        if (hasMoreData) {
            try {
                var params = { pageIndex: currentPageIndex + 1, keyword: searchkeyword };
                lu.partialPageLoadingToElement(pageUrl, params, tbodyID, null,
                    function () {
                        button.empty().html('').html("Load More");
                        button.removeAttr("disabled");
                    }
                    , true, true, overlay);
            }
            catch (e) {
            }

        }
        else {
            $(showMoreBtnIdentifier).parent().addClass('d-none');
        }
    });
};

lu.SafeExecute = function (func, exceptionHandler = (ex) => { console.log(JSON.stringify(ex)) }) {
    return () => {
        try {
            if (func)
                func();
        }
        catch (ex) {
            if (exceptionHandler) exceptionHandler(ex);
            else console.log(JSON.stringify(ex))
        }

    }

}

lu.ConvertStringArrayToInt = function (arr) {
    if (!!arr) {
        let _ = [...arr];
        // Remove empty items 
        _ = _.filter((el) => el != '');
        // conversion
        return _.map((el) => parseInt(el));
    }
    return [];
}

lu.renderPartialCardsWithPagination = function (pageUrl, tbodyID, showMoreBtnIdentifier, searchButtonIdentifier, append = false, loaderHTML = '<span class="spinner-grow spinner-grow-sm" role="status" aria-hidden="true"></span> Please wait..') {
    try {

        var addClassHTML = `<div class="col-lg-3 col-sm-12 col-md-4 mb-g">
                <div class="card border showAddClassModalBtn h-100 w-100">
                    <div class="card-body h-100 w-100 text-center">
                        <button class=" btn btn-xl btn-block text-center btn-outline-primary pt-1 h-100 w-100" onclick="showAddClassModal()" title="Add New Class" data-toggle="tooltip">+ ADD CLASS</button>
                    </div>
                </div>
            </div>`;

        var params = { pageIndex: 1 };
        lu.partialCardLoadingToElement(pageUrl, params, tbodyID, showMoreBtnIdentifier,
            function () {
                _showMoreBtnIdentifier = "#" + showMoreBtnIdentifier;

                var totalRows = $(`#${tbodyID}`).children().last().data('totalrows');
                var currentPageIndex = $(`#${tbodyID}`).children().last().data('pageindex');
                var currentPageSize = $(`#${tbodyID}`).children().last().data('pagesize');
                var hasMoreData = (totalRows - (currentPageIndex * currentPageSize)) > 0;

                if (hasMoreData)
                    $(_showMoreBtnIdentifier).parent().removeClass('d-none');
                else {
                    $(_showMoreBtnIdentifier).parent().addClass('d-none');
                }
            }, false, addClassHTML);

    }
    catch (e) {
    }

    // Binds Click event of search button 
    $(`#${tbodyID}_SearchButton`).click(() => {

        var tableSelector = `#${tbodyID}`;

        var button = $(`${tableSelector}_SearchButton`);
        var searchKeyword = $(`${tableSelector}_SearchInput`).val();

        button.html(loaderHTML);
        button.attr("disabled", "disabled");
        try {
            console.log('searched: ' + searchKeyword);

            var params = {
                pageIndex: 1,
                keyword: searchKeyword
            };
            lu.partialCardLoadingToElement(pageUrl, params, tbodyID, showMoreBtnIdentifier,
                function () {
                    button.empty().html('').html("<i class='fal fa-search'></i>");
                    button.removeAttr("disabled");
                    _showMoreBtnIdentifier = "#" + showMoreBtnIdentifier;

                    var totalRows = $(`#${tbodyID}`).children().last().data('totalrows');
                    var currentPageIndex = $(`#${tbodyID}`).children().last().data('pageindex');
                    var currentPageSize = $(`#${tbodyID}`).children().last().data('pagesize');
                    var hasMoreData = (totalRows - (currentPageIndex * currentPageSize)) > 0;

                    if (hasMoreData)
                        $(_showMoreBtnIdentifier).parent().removeClass('d-none');
                    else {
                        $(_showMoreBtnIdentifier).parent().addClass('d-none');
                    }
                }, false, addClassHTML);
        }
        catch (e) {
        }

    });

    // Binds Click event of show more button
    $('#' + showMoreBtnIdentifier).click(() => {

        var button = $("#" + showMoreBtnIdentifier);
        button.html(loaderHTML);
        button.attr("disabled", "disabled");
        var totalRows = $(`#${tbodyID}`).children().last().data('totalrows');
        var currentPageIndex = $(`#${tbodyID}`).children().last().data('pageindex');
        var currentPageSize = $(`#${tbodyID}`).children().last().data('pagesize');
        var searchkeyword = $(`#${tbodyID}`).children().last().data('searchkeyword');
        var hasMoreData = (totalRows - (currentPageIndex * currentPageSize)) > 0;

        if (hasMoreData) {
            try {
                var params = { pageIndex: currentPageIndex + 1, keyword: searchkeyword };
                lu.partialCardLoadingToElement(pageUrl, params, tbodyID, showMoreBtnIdentifier,
                    function () {
                        var _showMoreBtnIdentifier = "#" + showMoreBtnIdentifier;

                        var totalRows = $(`#${tbodyID}`).children().last().data('totalrows');
                        var currentPageIndex = $(`#${tbodyID}`).children().last().data('pageindex');
                        var currentPageSize = $(`#${tbodyID}`).children().last().data('pagesize');
                        var hasMoreData = (totalRows - (currentPageIndex * currentPageSize)) > 0;

                        if (hasMoreData) {

                            //button.attr("disabled", "disabled");
                            $(_showMoreBtnIdentifier).parent().removeClass('d-none');
                        }
                        else {
                            $(_showMoreBtnIdentifier).parent().addClass('d-none');
                        }
                      
                        //var button = $("#" + showMoreBtnIdentifier);
                        button.html("").html("Load More");
                        button.removeAttr("disabled");
                    }, true, addClassHTML);
            }
            catch (e) {
            }
        }
        else {
            $(showMoreBtnIdentifier).parent().addClass('d-none');
        }
    });

};

lu.partialCardLoadingToElement = function (pageUrl, dataObj, elementId, btnForLoading, callback, append = false, prependedResultHTML = null) {

    var btnOriginalHtml = 'Load More';
    //if (!lu.isNullOrEmpty()) {
    //    btnOriginalHtml = lu.showLoadingToButtonAndReturnOriginalHtml("#" + btnForLoading);
    //}
    $.ajax({
        async: true,
        cache: false,
        url: pageUrl,
        contentType: 'application/html; charset=utf-8',
        type: 'GET',
        data: dataObj,
        dataType: 'html',
        success: function (data) {

            if (data.indexOf('"error":true,') !== -1) {
                lu.showAlertWithType(JSON.parse(data).msg, "error");
            } else {
                if (append) {
                    $("#" + elementId).append(data);
                } else {

                    $("#" + elementId).empty().html(prependedResultHTML + data);
                }
            }
            lu.handleAjaxCallBackAndLoadingButton("#" + btnForLoading, btnOriginalHtml, callback, data);
            lu.hideLoading();
        },
        xhr: function () {
            var xhr = new window.XMLHttpRequest();
            // Download progress
            xhr.addEventListener("progress", function (evt) {
                if (evt.lengthComputable) {
                    $("#" + elementId).find('.progress-bar').css('width', Math.round(evt.loaded / evt.total * 100) + "%");
                }
            }, false);
            return xhr;
        },
        beforeSend: function () {
            lu.showLoading();
        },
        error: function (ex) {
            lu.hideLoading();
            if (!lu.isNullOrEmpty($("#" + elementId).find('.progress-bar'))) {
                //$("#" + elementId).empty();
            }
            lu.handleAjaxCallBackAndLoadingButton(btnForLoading, btnOriginalHtml, callback, false);
            // lu.ajaxErrorCall(ex);
        }
    });
};

